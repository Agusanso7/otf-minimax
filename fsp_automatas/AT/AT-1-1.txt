#Controllable
2
descend
approach
#Marking
1
control.all
#Machines
4
Plant.ResponseMonitor
#States
2
#Edges
5
0 0 extendFlight.0
0 0 approach.0
0 1 requestLand.0
0 0 descend.0.0
1 0 descend.0.0
Plant.RampMonitor
#States
3
#Edges
4
0 1 approach.0
1 2 approach.0
1 0 land.0
2 -1 land.crash
Plant.HeightMonitor(0)
#States
2
#Edges
2
0 1 descend.0.0
1 0 land.0
Plant.Airplane(0)
#States
5
#Edges
6
0 4 extendFlight.0
0 1 requestLand.0
1 2 descend.0.0
2 3 approach.0
3 4 land.0
4 0 control.all

  controllable = {descend[Plane][Height], approach[Plane]}
  marking = {control.all}

Analyzing depth 2 ...
actions uncontrolled: extendFlight.0#PASS_ACTION#requestLand.0#
best score: 0, action: requestLand.0 for state 0-
actions uncontrolled: requestLand.0#PASS_ACTION#extendFlight.0#
best score: 0, action: requestLand.0 for state 0-
actions controlled: descend.0.0#approach.0#
best score: 0, action: approach.0 ,for state 0-
actions uncontrolled: PASS_ACTION#
best score: 0, action: PASS_ACTION for state 1-
actions uncontrolled: requestLand.0#
best score: 0, action: requestLand.0 for state 0-
actions controlled: PASS_ACTION-MAX#
best score: 0, action: PASS_ACTION-MAX ,for state 0-
actions uncontrolled: requestLand.0#PASS_ACTION#
best score: 0, action: PASS_ACTION for state 0-
actions controlled: descend.0.0#
best score: -1, action: descend.0.0 ,for state 1-
actions uncontrolled: PASS_ACTION#
best score: -1, action: PASS_ACTION for state 1-
actions uncontrolled: PASS_ACTION#extendFlight.0#requestLand.0#
best score: -1, action: requestLand.0 for state 0-
Minimizing (aka uncontrollable) player optimal score: -1

